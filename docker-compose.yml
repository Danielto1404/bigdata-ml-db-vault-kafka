version: "3.9"
services:
  twitter-sentiment:
    image: danielto1404/twitter-sentiment-vault-kafka:latest
    platform: linux/amd64
    container_name: twitter-sentiment-vault-kafka
    build:
      context: .
      dockerfile: Dockerfiles/twitter.trainer.dockerfile
    command: bash -c "python src/train.py --exp_name=tfidf_logreg
      && python src/test.py --vault-token=${VAULT_TOKEN}
      && coverage run src/unit_tests/test_preprocess.py
      && coverage run -a src/unit_tests/test_training.py
      && coverage report -m"
    ports:
      - "8000:8000"
    links:
      - "postgres:database"
      - "hashicorp:vault"
    depends_on:
      postgres:
        condition: service_healthy
      hashicorp:
        condition: service_healthy
      store_credentials:
        condition: service_completed_successfully

  postgres:
    image: postgres:latest
    container_name: database
    platform: linux/amd64
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_HOST_AUTH_METHOD=password # https://github.com/aws/aws-mwaa-local-runner/issues/237#issuecomment-1510983321
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DBNAME}
    restart: always
    depends_on:
      kafka-topics-generator:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DBNAME}" ]
      timeout: 10s
      retries: 10

  hashicorp:
    image: danielto1404/hashicorp:latest
    container_name: vault
    build:
      context: .
      dockerfile: Dockerfiles/hashicorp.vault.dockerfile
    platform: linux/amd64
    ports:
      - "8200:8200"
    restart: always
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
    healthcheck:
      test: [ "CMD", "curl", "http://127.0.0.1:8200/v1/sys/seal-status" ]
      timeout: 10s
      retries: 10

  store_credentials:
    image: danielto1404/vault-store-credentials-kafka:latest
    container_name: store-credentials
    build:
      context: .
      dockerfile: Dockerfiles/storing.credentials.dockerfile
    platform: linux/amd64
    ports:
      - "8001:8001"
    links:
      - "hashicorp:vault"
    command: bash -c "python src/vault.py \
      --token=${VAULT_TOKEN} \
      --postgres-user=${POSTGRES_USER} \
      --postgres-password=${POSTGRES_PASSWORD} \
      --postgres-dbname=${POSTGRES_DBNAME} \
      --kafka-host=${KAFKA_HOST} \
      --kafka-port=${KAFKA_PORT}"
    depends_on:
      hashicorp:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT

  kafka-topics-generator:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-topics-generator
    depends_on:
      - kafka
    command: bash -c "sleep 5s && kafka-topics \
      --create \
      --topic=kafka-predictions \
      --if-not-exists \
      --bootstrap-server=kafka:9092"

  kafka-consumer:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-consumer
    command: bash -c "kafka-console-consumer \
      --bootstrap-server kafka:9092 \
      --topic kafka-predictions \
      --from-beginning \
      --timeout-ms 300000" # 5 minutes